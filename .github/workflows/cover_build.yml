name: Cover build

on:
  workflow_dispatch:
    inputs:
      canister_id:
        description: 'Canister id'
        required: true
        type: string
      canister_name:
        description: 'Canister name'
        required: true
        type: string
      repo_url:
        description: 'Repo url'
        required: true
        type: string
      user_access_token:
        description: 'User access token'
        required: true
        type: string
      commit_hash:
        description: 'Repo commit hash'
        required: true
        type: string
      rust_version:
        description: 'Rust version'
        required: false
        type: string
      dfx_version:
        description: 'DFX version'
        required: true
        type: string
      optimize_times:
        description: 'Optimize times'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    container: namdh2604/cover
    steps:
      - name: Clone github repo
        run: |
          git init
          git remote add origin https://${{ github.event.inputs.user_access_token }}@${{ github.event.inputs.repo_url }}
          git fetch origin ${{ github.event.inputs.commit_hash }} --depth 1
          git reset --hard FETCH_HEAD
      - uses: actions/cache@v2
        with:
          path: |
            /opt/cargo/bin/
            /opt/cargo/registry/index/
            /opt/cargo/registry/cache/
            /opt/cargo/git/db/
            /opt/rustup/
            /usr/local/bin/dfx
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-version-${{ github.event.inputs.rust_version }}
      - name: Setup env
        if: ${{ github.event.inputs.rust_version != '' }}
        run: |
          echo "RUSTUP_HOME=/opt/rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=/opt/cargo" >> $GITHUB_ENV
          echo "PATH=/opt/cargo/bin:$PATH" >> $GITHUB_ENV
      - name: Install Rust toolchain
        if: ${{ github.event.inputs.rust_version != '' }}
        run: |
          RUST_VERSION=${{ github.event.inputs.rust_version }}
          if ! type rustc > /dev/null || [ $(rustc --version | awk '{print $2}') != ${RUST_VERSION} ]
          then
            echo "No Rust found. Start downloading..."
            curl --fail https://sh.rustup.rs/ -sSf | sh -s -- -y --default-toolchain ${RUST_VERSION}-x86_64-unknown-linux-gnu --no-modify-path
            rustup default ${RUST_VERSION}-x86_64-unknown-linux-gnu
            rustup target add wasm32-unknown-unknown
          fi
      - name: Install DFX
        env:
          DFX_VERSION: ${{ github.event.inputs.dfx_version }}
        run: |
          if ! type dfx > /dev/null || [ $(dfx --version | awk '{print $2}') != ${DFX_VERSION} ]
          then
            echo "No DFX found. Start downloading..."
            curl -fsSL https://sdk.dfinity.org/install.sh | bash
          fi
      - name: Install optimizer
        if: ${{ github.event.inputs.optimize_times > 0 }}
        run: command -v ic-cdk-optimizer > /dev/null || cargo install ic-cdk-optimizer --vers 0.3.3
      - name: Build wasm
        run: dfx build --network ic
      - name: Optimize wasm
        run: |
          i=0
          while [ $i -lt ${{ github.event.inputs.optimize_times }} ]
          do
            ic-cdk-optimizer .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm \
            -o .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm
            i=`expr $i + 1`
          done
      - name: Hash wasm
        run: openssl dgst -sha256 .dfx/ic/canisters/${{ github.event.inputs.canister_name }}/${{ github.event.inputs.canister_name }}.wasm | awk '/.+$/{print "0x"$2}'

