type Activity = record {
  canister_id : principal;
  created_at : nat64;
  build_status : BuildStatus;
};
type BuildConfig = record {
  updated_at : nat64;
  canister_id : principal;
  caller_id : principal;
  delegate_canister_id : opt principal;
  dfx_version : text;
  canister_name : text;
  commit_hash : text;
  repo_url : text;
  rust_version : opt text;
  optimize_count : nat8;
};
type BuildConfigInfo = record {
  canister_id : principal;
  caller_id : principal;
};
type BuildStatus = variant { Error; Building; Success; Pending };
type CanisterType = variant { Rust; Custom; Motoko };
type Config = record {
  admin : opt vec principal;
  validator : opt vec principal;
  builder : opt vec principal;
};
type CoverMetadata = record {
  dfx_version : text;
  canister_name : text;
  commit_hash : text;
  repo_url : text;
  rust_version : opt text;
  optimize_count : nat8;
};
type Error = variant { BuildInProgress };
type ManualReply = record {
  page_index : nat64;
  data : vec Activity;
  total_pages : nat64;
  total_items : nat64;
  is_first_page : bool;
  items_per_page : nat64;
  is_last_page : bool;
};
type ManualReply_1 = record {
  page_index : nat64;
  data : vec MyActivity;
  total_pages : nat64;
  total_items : nat64;
  is_first_page : bool;
  items_per_page : nat64;
  is_last_page : bool;
};
type ManualReply_2 = record {
  page_index : nat64;
  data : vec Verification;
  total_pages : nat64;
  total_items : nat64;
  is_first_page : bool;
  items_per_page : nat64;
  is_last_page : bool;
};
type MyActivity = record {
  canister_id : principal;
  created_at : nat64;
  caller_id : principal;
  build_status : opt BuildStatus;
  build_config_status : opt MyBuildConfigActivity;
};
type MyBuildConfigActivity = variant { Save; Delete };
type PaginationInfo = record { page_index : nat64; items_per_page : nat64 };
type RegisterVerification = record {
  canister_id : principal;
  caller_id : principal;
  delegate_canister_id : opt principal;
  dfx_version : text;
  canister_name : text;
  commit_hash : text;
  repo_url : text;
  repo_visibility : text;
  rust_version : opt text;
  optimize_count : nat8;
};
type Result = variant { Ok; Err : Error };
type SaveBuildConfig = record {
  canister_id : principal;
  caller_id : principal;
  delegate_canister_id : opt principal;
  dfx_version : text;
  canister_name : text;
  commit_hash : text;
  repo_url : text;
  rust_version : opt text;
  optimize_count : nat8;
};
type Stats = record {
  custom_canisters_count : nat64;
  build_error_count : nat64;
  build_in_progress_count : nat64;
  rust_canisters_count : nat64;
  build_pending_count : nat64;
  motoko_canisters_count : nat64;
  total_canisters : nat64;
  build_success_count : nat64;
};
type SubmitVerification = record {
  canister_id : principal;
  caller_id : principal;
  delegate_canister_id : opt principal;
  dfx_version : text;
  build_status : BuildStatus;
  canister_name : text;
  commit_hash : text;
  canister_type : opt CanisterType;
  repo_url : text;
  repo_visibility : text;
  rust_version : opt text;
  optimize_count : nat8;
  build_url : text;
  wasm_hash : opt text;
};
type Verification = record {
  updated_at : nat64;
  updated_by : principal;
  canister_id : principal;
  delegate_canister_id : opt principal;
  dfx_version : text;
  build_status : BuildStatus;
  canister_name : text;
  commit_hash : text;
  canister_type : opt CanisterType;
  repo_url : text;
  repo_visibility : text;
  rust_version : opt text;
  optimize_count : nat8;
  build_url : opt text;
  wasm_hash : opt text;
};
service : (opt Config) -> {
  addAdmin : (principal) -> ();
  addBuilder : (principal) -> ();
  addValidator : (principal) -> ();
  coverMetadata : () -> (CoverMetadata) query;
  deleteAdmin : (principal) -> ();
  deleteBuilder : (principal) -> ();
  deleteMyBuildConfig : (principal) -> ();
  deleteValidator : (principal) -> ();
  getActivities : (PaginationInfo) -> (ManualReply) query;
  getAdmins : () -> (vec principal) query;
  getBuildConfigValidator : (BuildConfigInfo) -> (opt BuildConfig) query;
  getBuilders : () -> (vec principal) query;
  getMyActivities : (PaginationInfo) -> (ManualReply_1) query;
  getMyBuildConfigById : (principal) -> (opt BuildConfig) query;
  getMyBuildConfigs : () -> (vec BuildConfig) query;
  getValidators : () -> (vec principal) query;
  getVerificationByCanisterId : (principal) -> (opt Verification) query;
  getVerifications : (PaginationInfo) -> (ManualReply_2) query;
  getVerificationsStats : () -> (Stats) query;
  registerVerification : (RegisterVerification) -> (Result);
  saveBuildConfig : (SaveBuildConfig) -> ();
  submitVerification : (SubmitVerification) -> ();
}